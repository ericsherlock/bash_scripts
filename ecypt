#! /bin/bash

#This Script Encrypts/Decrypts With Password Protection a Single File or Directory. 
#-->Once File or Folder is Encrypted, script Uses 'shred' Commmand To Delete Unencrypted Version Left Behind by 'gpg'.
#-->If You Encrypt Using This Script, Must Also Decrypt With This Script.
#-->Can Recursivly Enccrypt Directories and Subdirectories.
#-->Script Uses 'gpg' with 256-bit Encryption.

#Usage Method
usage() {
        echo "Usage: [PROGRAM_NAME] [OPTION] [FILENAME]"
	echo "Options: [ -f | --file ] [ -df | --decrypt-file] [ -d | --directory ] [ -dd | --decrypt-directory]"
}

#Method To Check Number Of Arguments
check_args() {

	if [ "$#" -ne 2 ]; then
		usage
		exit_func 1
	elif [ "$#" -eq 2 ]; then
		return 0
	fi
}

#Exit Script Function
exit_func () {
	if [ "$1" -eq 1 ]; then
		echo "Exit 1 --> Wrong Number of Arguments."
		exit 1
	elif [ "$1" -eq 0 ]; then
		echo "Exit 0 --> Success!"
		exit 0
	fi
}

#While There Are Arguments To The Script
while [ "$1" != "" ]; do
	#Switch On Option Argument
	case $1 in
		-f | --file )		    if [ "$(check_args)" ]; then
						    gpg -c --cipher-algo AES256 $2
                                        	    shred -u -n $(shuf -i 3-10 -n 1) $2
                                            	    exit_func 0
					    fi
					    ;;

		-df | --decrypt-file )	    if [ "$(check_args)" ]; then
                                                    gpg $2
						    shred -u -n $(shuf -i 3-10 -n 1) $2
						    exit_func 0
                                            fi
					    ;;

		-d | --directory )	    if [ "$(check_args)" ]; then
                                                    tar zcf - $2 | gpg -c --cipher-algo AES256 -o "$2.tar.gpg"
						    find $2 -type f | xargs shred -u -n $(shuf -i 3-10 -n 1)
						    rm -rf $2
						    exit_func 0
                                            fi
					    ;;

		-dd | --decrypt-directory ) if [ "$(check_args)" ]; then
                                                    gpg -o- $2 | tar zxvf -
						    shred -u -n $(shuf -i 3-10 -n 1) $2
						    exit_func 0
                                            fi  
				            ;;

		* ) 			    usage
                                            exit_func 1
	esac
done
