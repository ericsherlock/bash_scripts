#! /bin/bash

#Print Usage Information
usage() {
        printf "Usage: [PROGRAM_NAME] [OPTION] [FILE/DIRECTORY]\n"
	printf "Options: [ -f | --file ] [ -df | --decrypt-file] [ -d | --directory ] [ -dd | --decrypt-directory]\n"
}

#Check The Number Of Arguemtns
check_args() {

	if [ "$#" -ne 2 ]; then
		usage
		exit_func 1
	elif [ "$#" -eq 1 ]; then
		usage
		exit_func 1
	elif [ "$#" -eq 2 ]; then
		return 0
	fi
}

#Check That Each Of The main Commands Used Executed Correctly
execution_check() {

        if [ "$1" -eq 0 ]; then
                return 0
        elif [ "$1" -eq 1 ]; then
                echo "Error Executiong 'shred' Command."
                exit_func 3
	elif [ "$1" -eq 2 ]; then
		echo "Error Executing 'gpg' Command."
		exit_func 3
        fi

}

#Print Exit Information
exit_func () {
	if [ "$1" -eq 1 ]; then
		printf "Exit 1 --> Wrong Number of Arguments.\n"
		usage
		exit 1
	elif [ "$1" -eq 2 ]; then 
		printf "File or Directory Arguments Were Incorrect.\n"
		usage
		exit 2
	elif [ "$1" -eq 3 ]; then
		usage
		exit 3
	elif [ "$1" -eq 0 ]; then
		printf "Exit 0 --> Success!\n"
		exit 0
	fi
}

#Main Program Loop
if [ "$(check_args)" ]; then
	#While There Are Arguments
	while [ "$1" != "" ]; do
			#Switch On The Arguments
			case $1 in
				#Encrypt A Single File
				-f | --file )		    if [ -f $2 ]; then
								#Use GPG To Encrypt, But Because GPG Leaves Behind An Unencrypted Version
								#Use Shred Command To Get Rid Of Unencrypted Copy Left Behind
								gpg -c --cipher-algo AES256 $2
								execution_check "$?"
                                        			shred -u -n $(shuf -i 3-10 -n 1) $2
								execution_check "$?"
                                        		 	exit_func 0
							    else
								#If Input Is Not A File, Print Error
								printf "%s is not a file.\n" $2
								exit_func 2
							    fi
							    ;;
				#Decrypt A Single File
				-df | --decrypt-file )	    if [ -f $2 ]; then
								#Decrypt The Encrypted File and Get Rid of Encrypted File Left Behind
                	                	                gpg $2
								execution_check "$?"
								shred -u -n $(shuf -i 3-10 -n 1) $2
								execution_check "$?"
								exit_func 0
							    else
								#If Input Is Not File, Print Error
								printf "%s is not a file.\n" $2
								exit_func 2
        		                                    fi
							    ;;
				#Encrypt A Directory
				-d | --directory )	    if [ -d $2 ]; then
								#Tar The Directory, Then Use GPG To Encrypt Tar File and Shred to Remove Leftover File
								name=${2%/}
								tar -cvf "$name".tar "$2"
								gpg -c --cipher-algo AES256 "$name.tar"
								execution_check "$?"
								shred -u -n $(shuf -i 3-10 -n 1) "$name.tar"
								execution_check "$?"
								rm -rf $2
								exit_func 0
							    else
								#If Input Is Not A Directory, Print Error
								printf "%s is not a directory.\n" $2
								exit_func 2
        	                        	            fi
							    ;;
				#Decrypt A Directory
				-dd | --decrypt-directory ) if [ -f $2 ]; then
								#Decrypt Tar File And Extract Tar File
								#Delete Any Encrypted Copies Left Behind
                	                                 	gpg -o- $2 | tar xvf -
								execution_check "$?"
								shred -u -n $(shuf -i 3-10 -n 1) $2
								execution_check "$?"
								exit_func 0
							    else
								#If Input Is Not A Directory, Print Error
								printf "%s is not a directory.\n" $2
								exit_func 2
							    fi  
						            ;;
	
				* ) 			    exit_func 1
			esac
	done
fi
