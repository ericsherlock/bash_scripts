#! /bin/bash

#This script utilizes the wireshark "Export Packet Dissections --> As 'Plain Text' File" Feature.
#Script Takes Generated Plain Text File and Manipulates It To Create A File That Contains
#Variations of ASCII, HEX, and PACKET HEADERS of Sniffed Packets. 

#Usage Method
usage(){
	echo "Usage: Make Sure To Use ABSOLUTE PATH."
	echo "Usage: [SCRIPT_NAME] [OPTION] [PATH_TO_PYTHON_FILE] [PATH_TO_ASCII_FILE] [PATH_TO_OUTPUT_FILE]"
	echo "OPTIONS: "
	echo "        -r | --raw ).............Output file contains unsorted raw hex and ascii."
	echo "        -rs | --raw-sorted)......Output file contains sorted raw hex and ascii."
	echo "        -ao | --ascii-only)......Output file contains unsorted raw ascii only."
	echo "        -as | --ascii-sorted)....Output file contains sorted raw ascii only."
	echo "        -ho | --hex-only)........Output file contains unsorted raw hex only."
	echo "        -hs | --hex-sorted)......Output file contains sorted hex only."
	echo "        -ph | --packet-headers)..Output file contains unsorted packet headers only."
	echo "        -ps | --headers-sorted)..Output file contains sorted packet headers."
}

#Exit Function Method
exit_func () {
	
	if [ "$1" -eq 0 ]; then
		echo "Exit 0 --> Success!"
		exit 0
	elif [ "$1" -eq 1 ]; then
		echo "Exit 1 --> Wrong Number of Arguments."	
		exit 1
	elif [ "$1" -eq 2 ]; then
		echo "Exit 2 --> Error in Case Statement Commands or Running Python Script ."
		exit 2
	elif [ "$1" -eq 3 ]; then
		echo "Exit 3 --> Option Does Not Exist."
		exit 3
	fi
}

#Execution Check Makes Sure Last Command Executed Successfully
execution_check () {

	if [ "$1" -eq 0 ]; then
		exit_func 0
	elif [ "$1" -ne 0 ]; then
		exit_func 2
	fi
}

#If Loop Checks Number of Arguments
if [ $# -eq 4 ]; then
	#While There is an Option Available
	while [ "$1" != "" ]; do
		#Switch on Option
		case $1 in
			-r | --raw)		python "$2" "$3" "$4"
						execution_check "$?"
						;;
			-rs | --raw-sorted)	python "$2" "$3" "$4"
						sort "$4" > "$4_raw_sorted"
						exit_func 0
						;;
			-ao | --ascii-only)	python "$2" "$3" "$4"
						cut -d " " -f 21 "$4" > "$4_ascii_only"
						sed -i '/^\s*$/d' "$4_ascii_only"
						execution_check "$?"
						;;
			-as | --ascii-sorted)	python "$2" "$3" "$4"
						cut -d " " -f 21 "$4" > "$4_ascii_only"
						sort "$4_ascii_only" > "$4_ascii_sorted"
						sed -i '/^\s*$/d' "$4_ascii_sorted"
						execution_check "$?"
						;;
			-ho | --hex-only)	python "$2" "$3" "$4"
						cut -c 1-50 "$4" > "$4_hex_only"
						execution_check "$?"	
						;;
			-hs | --hex-sorted)	python "$2" "$3" "$4"
						cut -c 1-50 "$4" > "$4_hex_only"
						sort "$4_hex_only" > "$4_hex_sorted"
						sed -i '/^\s*$/d' "$4_hex_sorted"
						execution_check "$?"
						;;
			-ph |--packet-headers)	python "$2" "$3" "$4_headers_only" 1
						execution_check $?
						;;
			-ps | --headers-sorted)	python "$2" "$3" "$4_headers_only" 1
						sort "$4_headers_only" > "$4_headers_sorted"
						sed -i '/^\s*$/d' "$4_headers_sorted"
						execution_check $?
						;;		
			*)			usage
						exit_func 3
		esac
	done
elif [ $# -ne 4 ]; then
	usage
	exit_func 1
fi
