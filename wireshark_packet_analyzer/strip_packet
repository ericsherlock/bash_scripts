#! /bin/bash

#Usage Method
usage(){
	echo "Usage: Make Sure To Use ABSOLUTE PATH."
	echo "Usage: [SCRIPT_NAME] [OPTION] [PATH_TO_PYTHON_FILE] [PATH_TO_ASCII_FILE] [PATH_TO_OUTPUT_FILE]"
	echo "Usage: All Options Specified Will Print To Output File Specified. "
	echo "OPTIONS: "
	echo "        -r)..unsorted raw hex and ascii."
	echo "        -R)..sorted raw hex and ascii."
	echo "        -a)..unsorted raw ascii only."
	echo "        -A)..sorted raw ascii only."
	echo "        -h)..unsorted raw hex only."
	echo "        -H)..sorted hex only."
	echo "        -p)..unsorted packet headers only."
	echo "        -P)..sorted packet headers."
}

#Exit Function Method
exit_func () {
	
	if [ "$1" -eq 0 ]; then
		echo "Exit 0 --> Success!"
		exit 0
	elif [ "$1" -eq 1 ]; then
		echo "Exit 1 --> Wrong Number of Arguments."	
		exit 1
	elif [ "$1" -eq 2 ]; then
		echo "Exit 2 --> Error in Case Statement Commands or Running Python Script ."
		exit 2
	elif [ "$1" -eq 3 ]; then
		echo "Exit 3 --> Option Does Not Exist."
		exit 3
	fi
}

#Method That Checks Number Of Arguments To The Script
check_args() {
		
	if [ "$#" -ne 4 ]; then
		usage
		exit_func 1
	elif [ "$#" -eq 4 ]; then
		return 0
	fi
}

#Execution Check Makes Sure Last Command Executed Successfully
execution_check () {

	if [ "$1" -eq 0 ]; then
		echo "Success!"
		return 0
	elif [ "$1" -ne 0 ]; then
		exit_func 2
	fi
}



#If Loop Checks Number of Arguments
if [ $# -eq 4 ]; then
	#While There is an Option Available
	while getopts 'rRaAhHpP' opt; do
		#Switch on Option
		case $opt in
			r)			echo "RAW DATA: "
						if [ "$(check_args)" ]; then
							python "$2" "$3" "$4"
							execution_check "$?"
						fi
						;;
			R)			echo "RAW DATA -> SORTED: "
						if [ "$(check_args)" ]; then
							python "$2" "$3" "$4"
							sort "$4" > "$4_raw_sorted"
							execution_check "$?"
						fi
						;;
			a)			echo "ASCII DATA ONLY: "
						if [ "$(check_args)" ]; then
							python "$2" "$3" "$4"
							cut -d " " -f 21 "$4" > "$4_ascii_only"
							sed -i '/^\s*$/d' "$4_ascii_only"
							execution_check "$?"
						fi
						;;
			A)			echo "ASCII DATA -> SORTED: "
						if [ "$(check_args)" ]; then
							python "$2" "$3" "$4"
							cut -d " " -f 21 "$4" > "$4_ascii_only"
							sort "$4_ascii_only" > "$4_ascii_sorted"
							sed -i '/^\s*$/d' "$4_ascii_sorted"
							execution_check "$?"
						fi
						;;
			h)			echo "HEX DATA ONLY: "
						if [ "$(check_args)" ]; then
							python "$2" "$3" "$4"
							cut -c 1-50 "$4" > "$4_hex_only"
							execution_check "$?"
						fi	
						;;
			H)			echo "HEX DATA -> SORTED: "
						if [ "$(check_args)" ]; then
							python "$2" "$3" "$4"
							cut -c 1-50 "$4" > "$4_hex_only"
							sort "$4_hex_only" > "$4_hex_sorted"
							sed -i '/^\s*$/d' "$4_hex_sorted"
							execution_check "$?"
						fi
						;;
			p)			echo "PACKET HEADERS ONLY: "
						if [ "$(check_args)" ]; then
							python "$2" "$3" "$4_headers_only" 1
							execution_check "$?"
						fi
						;;
			P)			echo "PACKET HEADERS -> SORTED"
						if [ "$(check_args)" ]; then
							python "$2" "$3" "$4_headers_only" 1
							sort "$4_headers_only" > "$4_headers_sorted"
							sed -i '/^\s*$/d' "$4_headers_sorted"
							execution_check $?
						fi
						;;		
			*)			usage
						exit_func 3
		esac
	done
elif [ $# -ne 4 ]; then
	usage
	exit_func 1
fi
